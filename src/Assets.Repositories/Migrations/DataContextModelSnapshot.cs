// <auto-generated />
using System;
using Assets.Repositories.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Assets.Repositories.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("assets")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Assets.Repositories.Entities.AssetEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Accuracy")
                        .HasColumnName("accuracy")
                        .HasColumnType("integer");

                    b.Property<string>("BrokerId")
                        .IsRequired()
                        .HasColumnName("broker_id")
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnName("is_disabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnName("symbol")
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId", "Symbol")
                        .IsUnique();

                    b.ToTable("assets");
                });

            modelBuilder.Entity("Assets.Repositories.Entities.AssetPairEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Accuracy")
                        .HasColumnName("accuracy")
                        .HasColumnType("integer");

                    b.Property<long>("BaseAssetId")
                        .HasColumnName("base_asset_id")
                        .HasColumnType("bigint");

                    b.Property<string>("BrokerId")
                        .IsRequired()
                        .HasColumnName("broker_id")
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnName("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDisabled")
                        .HasColumnName("is_disabled")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MarketOrderPriceThreshold")
                        .HasColumnName("market_order_price_threshold")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MaxOppositeVolume")
                        .HasColumnName("max_opposite_volume")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MaxVolume")
                        .HasColumnName("max_volume")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinVolume")
                        .HasColumnName("min_volume")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Modified")
                        .HasColumnName("modified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("QuotingAssetId")
                        .HasColumnName("quoting_asset_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnName("symbol")
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("BaseAssetId");

                    b.HasIndex("QuotingAssetId");

                    b.HasIndex("BrokerId", "Symbol")
                        .IsUnique();

                    b.ToTable("asset_pairs");
                });

            modelBuilder.Entity("Assets.Repositories.Entities.AssetPairEntity", b =>
                {
                    b.HasOne("Assets.Repositories.Entities.AssetEntity", null)
                        .WithMany()
                        .HasForeignKey("BaseAssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Assets.Repositories.Entities.AssetEntity", null)
                        .WithMany()
                        .HasForeignKey("QuotingAssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
